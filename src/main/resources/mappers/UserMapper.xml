<?xml version="1.0" encoding="UTF-8" ?>

<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.dparadig.auth_server.mapper.UserMapper">

    <select id="getAllUser" resultType="CustomerUser">
        SELECT * FROM customer_user
    </select>

    <select id="getUserByEmail" resultType="CustomerUser">
        SELECT * FROM customer_user WHERE email = #{email} AND status = 1
    </select>

    <select id="getUserById" resultType="CustomerUser">
        SELECT * FROM customer_user WHERE customer_user_id = #{customerUserId} AND status = 1
    </select>

    <select id="getAllCompanyUsersBylLicenseCompanyId" resultType="CustomerUser"  parameterType="int">
        SELECT cu.customer_user_id, cu.name, cu.email FROM customer_user cu
        LEFT JOIN license_company lc on cu.customer_company_id = lc.customer_company_id
        WHERE lc.license_company_id = #{licenseCompanyId}
    </select>

    <select id="getUserRoles" resultType="Role">
        SELECT *
        FROM customer_user_role as cur
        LEFT JOIN
        role on cur.role_id = role.role_id
        WHERE cur.customer_user_id = #{customerUserId}
    </select>


    <select id="getUserValidationStatus" resultType="int">
        SELECT validation_status
        FROM customer_user
        WHERE customer_user_id = #{customerUserId}
    </select>

    <select id="getRolePrivileges" resultType="Privilege">
        SELECT p.`privilege_id`,
            p.`name`,
            p.`description`,
            p.`privilege_type`,
            p.`category`,
            p.`status`
        FROM `role_privilege` as  rp
        LEFT JOIN privilege as p on  p.privilege_id = rp.privilege_id
        WHERE rp.role_id = #{roleId};
    </select>

    <select id="getRolePrivilegesOfUser" resultType="Privilege">
        SELECT p.`privilege_id`,
        p.`name`,
        p.`description`,
        p.`privilege_type`,
        p.`category`,
        p.`status`
        FROM `role_privilege` as  rp
        LEFT JOIN privilege as p on  p.privilege_id = rp.privilege_id
        LEFT JOIN customer_user_role as cur ON rp.role_id=cur.role_id
        WHERE cur.customer_user_id = #{customerUserID};
    </select>
    
    <select id="getCustomerCompanyByName" resultType="LicenseCompany">
    	SELECT cc.customer_company_id, lc.license_company_id
    	FROM customer_company cc
		LEFT JOIN license_company lc
			ON lc.customer_company_id = cc.customer_company_id
			AND lc.license_type_id IN
				(SELECT lt.license_type_id FROM license_type lt
				LEFT JOIN product p ON lt.product_id = p.product_id
				WHERE p.name = #{portalType})
			AND lc.status = 1
		WHERE cc.company_name = #{companyName}
		ORDER BY cc.customer_company_id
    </select>

    <insert id="insertCompanyName" parameterType="CustomerCompany" useGeneratedKeys="true" keyProperty="customerCompantId"  keyColumn="customer_company_id">
        INSERT INTO customer_company
        (company_name)
        VALUES
        (#{companyName})
    </insert>

    <insert id="insertUser" parameterType="CustomerUser" useGeneratedKeys="true" keyProperty="customerUserId"  keyColumn="customer_user_id">
        INSERT INTO customer_user
        (`customer_company_id`,
        `email`,
        `name`,
        `pass_curr`)
        VALUES
        (#{customerCompanyId},#{email},#{name},#{passCurr})
    </insert>

    <insert id="insertAddedUser" parameterType="CustomerUser" useGeneratedKeys="true" keyProperty="customerUserId"  keyColumn="customer_user_id">
        INSERT INTO customer_user
        (`customer_company_id`,
        `email`,
        `name`,
        `pass_curr`,
        `validation_status`,
        `status`)
        VALUES
        (#{customerCompanyId},#{email},#{name},#{passCurr},1,1)
    </insert>

    <insert id="insertUserRole" parameterType="CustomerUser">
        INSERT INTO customer_user_role
        (`customer_user_id`,
        `role_id`)
        VALUES
        (#{customerUserId}, (SELECT role_id FROM role where customer_company_id = #{customerCompanyId} AND name = #{roleName}))
    </insert>


    <update id="validateUser">
        update customer_user set
        validation_status = 1
        where customer_user_id = #{customerUserId}
    </update>

    <update id="updateUserPass"  parameterType="CustomerUser">
        update customer_user set
        pass_prev2 = pass_prev,
        pass_prev = pass_curr,
        pass_curr = #{passCurr}
        where customer_user_id = #{customerUserId}
    </update>

    <update id="updateUser"  parameterType="CustomerUser">
        update customer_user set
        email = #{email},
        name = #{name},
        id_document = #{idDocument},
        country_id = #{countryId},
        language_list_id = #{languageListId},
        modification_date = now()
        where customer_user_id = #{customerUserId}
    </update>


    <select id="getAllCountries" resultType="Map">
        SELECT * FROM country;
    </select>

    <select id="getAllLanguages" resultType="Map">
        SELECT * FROM language_list where valid = 1;
    </select>

    <insert id="insertRoleAdmin" parameterType="Role" useGeneratedKeys="true" keyProperty="roleId"  keyColumn="role_id">
        INSERT INTO role
        (`customer_company_id`,
        `name`,
        `status`)
        VALUES
        (#{customerCompanyId}, #{name}, #{status})
    </insert>
</mapper>
